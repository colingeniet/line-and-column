<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="class_board" kind="class" language="C++" prot="public">
    <compoundname>Board</compoundname>
    <includes refid="board_8h" local="no">board.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_board_1a90a8efaa4736af25511ac948bdd27d6c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Board::width</definition>
        <argsstring></argsstring>
        <name>width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="176" column="1" bodyfile="board.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_board_1aa0cb8de0254520dc08dab5796643c8e5" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Board::height</definition>
        <argsstring></argsstring>
        <name>height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_board" kindref="compound">Board</ref>&apos;s size </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="176" column="1" bodyfile="board.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_board_1a34e93b0c8fb71752cb141a6fbfc548a1" prot="private" static="no" mutable="no">
        <type>int **</type>
        <definition>int** Board::board</definition>
        <argsstring></argsstring>
        <name>board</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array to represente the board </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="177" column="1" bodyfile="board.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_board_1a815539526352256b76c07aaeb633dbb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Board::Board</definition>
        <argsstring>(int _width, int _height)</argsstring>
        <name>Board</name>
        <param>
          <type>int</type>
          <declname>_width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_height</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Constructor for <ref refid="class_board" kindref="compound">Board</ref></para><para>Set size then create array and initialize it empty.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_width</parametername>
</parameternamelist>
<parameterdescription>
<para>: <ref refid="class_board" kindref="compound">Board</ref>&apos;s width (number of possinble squares) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_height</parametername>
</parameternamelist>
<parameterdescription>
<para>: <ref refid="class_board" kindref="compound">Board</ref>&apos;s height (number of possible squares) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="41" column="1" bodyfile="board.cpp" bodystart="6" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="class_board_1a467d2914714aa66a5b29e963ea4bf30b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Board::Board</definition>
        <argsstring>(const Board &amp;_board)</argsstring>
        <name>Board</name>
        <param>
          <type>const <ref refid="class_board" kindref="compound">Board</ref> &amp;</type>
          <declname>_board</declname>
        </param>
        <briefdescription>
<para>Constructor by copy. </para>        </briefdescription>
        <detaileddescription>
<para>Constructor by copy of Baord class. Allow to build a board from another already existing. Set size then create the array witch is initialized with copied array&apos;s values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_board</parametername>
</parameternamelist>
<parameterdescription>
<para>: <ref refid="class_board" kindref="compound">Board</ref> to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="53" column="1" bodyfile="board.cpp" bodystart="19" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="class_board_1af73f45730119a1fd8f6670f53f959e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Board::~Board</definition>
        <argsstring>()</argsstring>
        <name>~Board</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>Baord of <ref refid="class_board" kindref="compound">Board</ref> instance (needed by presence of the dynamic allocation -2 dim. array- in attribute). Free memory ligne by ligne then free main column. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="62" column="1" bodyfile="board.cpp" bodystart="32" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_board_1ac67493bc18a85bffd6d31b294e0298b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_board" kindref="compound">Board</ref> &amp;</type>
        <definition>Board &amp; Board::operator=</definition>
        <argsstring>(const Board &amp;_board)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_board" kindref="compound">Board</ref> &amp;</type>
          <declname>_board</declname>
        </param>
        <briefdescription>
<para>Overload of affectation operator. </para>        </briefdescription>
        <detaileddescription>
<para>Affectation operator for <ref refid="class_board" kindref="compound">Board</ref> Allow to fully change the board from another board. Free memory ligne by ligne then free main column. Set size then create the array witch is initialized with copied array&apos;s values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_board</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_board" kindref="compound">Board</ref> to be copied</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A board instance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="77" column="1" bodyfile="board.cpp" bodystart="40" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_board_1a0380aba58e451b88ec206e253083e049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Board::setSquare</definition>
        <argsstring>(int x, int y, int color)</argsstring>
        <name>setSquare</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Change a square&apos;s color. </para>        </briefdescription>
        <detaileddescription>
<para>Changes the colors of a square whose coordinates are passed as parameters.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>: Square&apos;s abscissia </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>: Squarer&apos;s ordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>: New color </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="89" column="1" bodyfile="board.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_board_1a533f62eccb7919cd20aba0ae9ea0e790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Board::addForm</definition>
        <argsstring>(const Form &amp;form, int x, int y, int color)</argsstring>
        <name>addForm</name>
        <param>
          <type>const <ref refid="class_form" kindref="compound">Form</ref> &amp;</type>
          <declname>form</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Put a shape on the board. </para>        </briefdescription>
        <detaileddescription>
<para>Browse all squares used by the new form the add thoses squares one by one to the board.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>form</parametername>
</parameternamelist>
<parameterdescription>
<para>: New form to add </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>: Abscissia where place the new form </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>: Ordinate where place the new form </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>: Color wished for this form </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="102" column="1" bodyfile="board.cpp" bodystart="69" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_board_1a6daa08c6ef14e1935538a749a6062913" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Board::formCollide</definition>
        <argsstring>(const Form &amp;form, int x, int y) const</argsstring>
        <name>formCollide</name>
        <param>
          <type>const <ref refid="class_form" kindref="compound">Form</ref> &amp;</type>
          <declname>form</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Check if a form can be place on the board. </para>        </briefdescription>
        <detaileddescription>
<para>Get bounding box of the shape and check if it can be placed at coordinates passed as parameter. If the answer is yes then it need a more precise checking so it check squres one by one.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>form</parametername>
</parameternamelist>
<parameterdescription>
<para>: Shape to verifie </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>: Abscissia where check collision </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>: Ordinate where check collision</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the shape can be place. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="117" column="1" bodyfile="board.cpp" bodystart="80" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_board_1ad4c85c20b50431a292293f38f412436a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Board::clean</definition>
        <argsstring>(int &amp;_line, int &amp;_column)</argsstring>
        <name>clean</name>
        <param>
          <type>int &amp;</type>
          <declname>_line</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>_column</declname>
        </param>
        <briefdescription>
<para>Clean filled lignes and columns. </para>        </briefdescription>
        <detaileddescription>
<para>Browe every lign and column and mark whoses are filled. When it&apos;s done, delete every marked line.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_ligne</parametername>
</parameternamelist>
<parameterdescription>
<para>: Number of deleted lines </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_column</parametername>
</parameternamelist>
<parameterdescription>
<para>: Number of deleted columns </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="129" column="1" bodyfile="board.cpp" bodystart="99" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_board_1a92d07d150ac4f9c341fd18168d86072c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int *</type>
        <definition>const int * Board::operator[]</definition>
        <argsstring>(int n) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Access operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>: Square&apos;s index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer on the square </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="142" column="1" bodyfile="board.cpp" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_board_1a503f6433c6b70b70d79a775f53a46d77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Board::getwidth</definition>
        <argsstring>() const</argsstring>
        <name>getwidth</name>
        <briefdescription>
<para>Accessor in reading of the width. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The board&apos;s width </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="149" column="1" bodyfile="board.cpp" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_board_1aafa14471fcdcd50b0edb336d4454b40c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Board::getheight</definition>
        <argsstring>() const</argsstring>
        <name>getheight</name>
        <briefdescription>
<para>Accessor in reading of the height. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The board&apos;s heigtht </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="156" column="1" bodyfile="board.cpp" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_board_1a57166342ac5109301eba30a452c515af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Board::write</definition>
        <argsstring>() const</argsstring>
        <name>write</name>
        <briefdescription>
<para>Write board. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A string witch represente the board </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="166" column="1" bodyfile="board.cpp" bodystart="169" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_board_1a32cb3d0839fd2abceb1ffcba270ae4fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Board::read</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>read</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Read a configuration form a string. </para>        </briefdescription>
        <detaileddescription>
<para>Check validity of the string passed and modify the configuration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="board.h" line="173" column="1" bodyfile="board.cpp" bodystart="182" bodyend="198"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_board" kindref="compound">Board</ref> class. </para>    </briefdescription>
    <detaileddescription>
<para>This class defines the main 1010 board. It mostly is the array of squares with all method required to manipulate it </para>    </detaileddescription>
    <location file="board.h" line="28" column="1" bodyfile="board.h" bodystart="27" bodyend="178"/>
    <listofallmembers>
      <member refid="class_board_1a533f62eccb7919cd20aba0ae9ea0e790" prot="public" virt="non-virtual"><scope>Board</scope><name>addForm</name></member>
      <member refid="class_board_1a34e93b0c8fb71752cb141a6fbfc548a1" prot="private" virt="non-virtual"><scope>Board</scope><name>board</name></member>
      <member refid="class_board_1a815539526352256b76c07aaeb633dbb7" prot="public" virt="non-virtual"><scope>Board</scope><name>Board</name></member>
      <member refid="class_board_1a467d2914714aa66a5b29e963ea4bf30b" prot="public" virt="non-virtual"><scope>Board</scope><name>Board</name></member>
      <member refid="class_board_1ad4c85c20b50431a292293f38f412436a" prot="public" virt="non-virtual"><scope>Board</scope><name>clean</name></member>
      <member refid="class_board_1a6daa08c6ef14e1935538a749a6062913" prot="public" virt="non-virtual"><scope>Board</scope><name>formCollide</name></member>
      <member refid="class_board_1aafa14471fcdcd50b0edb336d4454b40c" prot="public" virt="non-virtual"><scope>Board</scope><name>getheight</name></member>
      <member refid="class_board_1a503f6433c6b70b70d79a775f53a46d77" prot="public" virt="non-virtual"><scope>Board</scope><name>getwidth</name></member>
      <member refid="class_board_1aa0cb8de0254520dc08dab5796643c8e5" prot="private" virt="non-virtual"><scope>Board</scope><name>height</name></member>
      <member refid="class_board_1ac67493bc18a85bffd6d31b294e0298b9" prot="public" virt="non-virtual"><scope>Board</scope><name>operator=</name></member>
      <member refid="class_board_1a92d07d150ac4f9c341fd18168d86072c" prot="public" virt="non-virtual"><scope>Board</scope><name>operator[]</name></member>
      <member refid="class_board_1a32cb3d0839fd2abceb1ffcba270ae4fd" prot="public" virt="non-virtual"><scope>Board</scope><name>read</name></member>
      <member refid="class_board_1a0380aba58e451b88ec206e253083e049" prot="public" virt="non-virtual"><scope>Board</scope><name>setSquare</name></member>
      <member refid="class_board_1a90a8efaa4736af25511ac948bdd27d6c" prot="private" virt="non-virtual"><scope>Board</scope><name>width</name></member>
      <member refid="class_board_1a57166342ac5109301eba30a452c515af" prot="public" virt="non-virtual"><scope>Board</scope><name>write</name></member>
      <member refid="class_board_1af73f45730119a1fd8f6670f53f959e68" prot="public" virt="non-virtual"><scope>Board</scope><name>~Board</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
