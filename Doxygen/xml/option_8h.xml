<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="option_8h" kind="file" language="C++">
    <compoundname>option.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">exception</includes>
    <includedby refid="main_8cpp" local="yes">main.cpp</includedby>
    <includedby refid="option_8cpp" local="yes">option.cpp</includedby>
    <incdepgraph>
      <node id="317">
        <label>string</label>
      </node>
      <node id="319">
        <label>exception</label>
      </node>
      <node id="318">
        <label>vector</label>
      </node>
      <node id="316">
        <label>option.h</label>
        <link refid="option_8h"/>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
        <childnode refid="319" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="321">
        <label>main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="322">
        <label>option.cpp</label>
        <link refid="option_8cpp"/>
      </node>
      <node id="320">
        <label>option.h</label>
        <link refid="option_8h"/>
        <childnode refid="321" relation="include">
        </childnode>
        <childnode refid="322" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_option" prot="public">Option</innerclass>
    <innerclass refid="class_option_set" prot="public">OptionSet</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>!</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Option<sp/>class</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>@author<sp/>Colin<sp/>Geniet</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>@version<sp/>2.1</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>@date<sp/>2016</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>class<sp/>allow<sp/>the<sp/>game<sp/>to<sp/>be<sp/>lauch<sp/>with<sp/>some<sp/>command<sp/>lines.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>General<sp/>purpose<sp/>class<sp/>for<sp/>command<sp/>line<sp/>options<sp/>definition</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>desined<sp/>for<sp/>--long,<sp/>-short<sp/>and<sp/>--option=value<sp/>synta.x.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPTION_H_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPTION_H_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="class_option" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_option" kindref="compound">Option</ref></highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_option_1a686af13adc828fe688e097c531816e58" kindref="member">Option</ref>(std::string<sp/>_name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_shortcut<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_option_1ad820e2fb8cc07899ff9ab9cbd4bed8bd" kindref="member">getname</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="class_option_1a14aaf12f3338434a47f7b69547118505" kindref="member">getshortcut</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_option_1a5ac713700e6cf3fb87736af5c4388f2a" kindref="member">value_required</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_option_1a2a850c15f77b6e7e512295fba20ead9d" kindref="member">setname</ref>(std::string<sp/>_name);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_option_1a33f76f0cac38ae7bb7020d7e68cb68a7" kindref="member">setshortcut</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_sc);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_option_1ab9ebb3871e3998d2d6ae7014606ad85e" kindref="member">require_value</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_value);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_option_1a261ccd60f0317b0e7a37ebd25e79bc9a" kindref="member">match</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;argument,<sp/>std::string*<sp/>value_str<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>shortcut;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="class_option_set" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_option_set" kindref="compound">OptionSet</ref></highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_option(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_option" kindref="compound">Option</ref>&amp;<sp/>opt);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>find(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;argument,<sp/>std::string<sp/>*name_str,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>*value_str);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_option" kindref="compound">Option</ref>&amp;<sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Option&gt;<sp/>options;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>OPTION_H_INCLUDED</highlight></codeline>
    </programlisting>
    <location file="option.h"/>
  </compounddef>
</doxygen>
