.TH "Board" 3 "Sun Jan 15 2017" "Version 2.1.0" "TenTen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Board \- \fBBoard\fP class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <board\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBoard\fP (int _width, int _height)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fBBoard\fP (const \fBBoard\fP &_board)"
.br
.RI "Constructor by copy\&. "
.ti -1c
.RI "\fB~Board\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "\fBBoard\fP & \fBoperator=\fP (const \fBBoard\fP &_board)"
.br
.RI "Overload of affectation operator\&. "
.ti -1c
.RI "void \fBsetSquare\fP (int x, int y, int color)"
.br
.RI "Change a square's color\&. "
.ti -1c
.RI "void \fBaddForm\fP (const \fBForm\fP &form, int x, int y, int color)"
.br
.RI "Put a shape on the board\&. "
.ti -1c
.RI "bool \fBformCollide\fP (const \fBForm\fP &form, int x, int y) const"
.br
.RI "Check if a form can be place on the board\&. "
.ti -1c
.RI "void \fBclean\fP (int &_line, int &_column)"
.br
.RI "Clean filled lignes and columns\&. "
.ti -1c
.RI "const int * \fBoperator[]\fP (int n) const"
.br
.RI "Access operator\&. "
.ti -1c
.RI "int \fBgetwidth\fP () const"
.br
.RI "Accessor in reading of the width\&. "
.ti -1c
.RI "int \fBgetheight\fP () const"
.br
.RI "Accessor in reading of the height\&. "
.ti -1c
.RI "std::string \fBwrite\fP () const"
.br
.RI "Write board\&. "
.ti -1c
.RI "void \fBread\fP (const std::string &str)"
.br
.RI "Read a configuration form a string\&. "
.in -1c
.SH "Detailed Description"
.PP 
\fBBoard\fP class\&. 

This class defines the main 1010 board\&. It mostly is the array of squares with all method required to manipulate it 
.PP
Definition at line 27 of file board\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Board::Board (int _width, int _height)"

.PP
Constructor\&. Constructor for \fBBoard\fP
.PP
Set size then create array and initialize it empty\&.
.PP
\fBParameters:\fP
.RS 4
\fI_width\fP : \fBBoard\fP's width (number of possinble squares) 
.br
\fI_height\fP : \fBBoard\fP's height (number of possible squares) 
.RE
.PP

.PP
Definition at line 6 of file board\&.cpp\&.
.SS "Board::Board (const \fBBoard\fP & _board)"

.PP
Constructor by copy\&. Constructor by copy of Baord class\&. Allow to build a board from another already existing\&. Set size then create the array witch is initialized with copied array's values\&.
.PP
\fBParameters:\fP
.RS 4
\fI_board\fP : \fBBoard\fP to copy 
.RE
.PP

.PP
Definition at line 19 of file board\&.cpp\&.
.SS "Board::~Board ()"

.PP
Destructor\&. Baord of \fBBoard\fP instance (needed by presence of the dynamic allocation -2 dim\&. array- in attribute)\&. Free memory ligne by ligne then free main column\&. 
.PP
Definition at line 32 of file board\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void Board::addForm (const \fBForm\fP & form, int x, int y, int color)"

.PP
Put a shape on the board\&. Browse all squares used by the new form the add thoses squares one by one to the board\&.
.PP
\fBParameters:\fP
.RS 4
\fIform\fP : New form to add 
.br
\fIx\fP : Abscissia where place the new form 
.br
\fIy\fP : Ordinate where place the new form 
.br
\fIcolor\fP : Color wished for this form 
.RE
.PP

.PP
Definition at line 69 of file board\&.cpp\&.
.SS "void Board::clean (int & _line, int & _column)"

.PP
Clean filled lignes and columns\&. Browe every lign and column and mark whoses are filled\&. When it's done, delete every marked line\&.
.PP
\fBParameters:\fP
.RS 4
\fI_ligne\fP : Number of deleted lines 
.br
\fI_column\fP : Number of deleted columns 
.RE
.PP

.PP
Definition at line 99 of file board\&.cpp\&.
.SS "bool Board::formCollide (const \fBForm\fP & form, int x, int y) const"

.PP
Check if a form can be place on the board\&. Get bounding box of the shape and check if it can be placed at coordinates passed as parameter\&. If the answer is yes then it need a more precise checking so it check squres one by one\&.
.PP
\fBParameters:\fP
.RS 4
\fIform\fP : Shape to verifie 
.br
\fIx\fP : Abscissia where check collision 
.br
\fIy\fP : Ordinate where check collision
.RE
.PP
\fBReturns:\fP
.RS 4
True if the shape can be place\&. 
.RE
.PP

.PP
Definition at line 80 of file board\&.cpp\&.
.SS "int Board::getheight () const"

.PP
Accessor in reading of the height\&. 
.PP
\fBReturns:\fP
.RS 4
The board's heigtht 
.RE
.PP

.PP
Definition at line 163 of file board\&.cpp\&.
.SS "int Board::getwidth () const"

.PP
Accessor in reading of the width\&. 
.PP
\fBReturns:\fP
.RS 4
The board's width 
.RE
.PP

.PP
Definition at line 159 of file board\&.cpp\&.
.SS "\fBBoard\fP & Board::operator= (const \fBBoard\fP & _board)"

.PP
Overload of affectation operator\&. Affectation operator for \fBBoard\fP Allow to fully change the board from another board\&. Free memory ligne by ligne then free main column\&. Set size then create the array witch is initialized with copied array's values\&.
.PP
\fBParameters:\fP
.RS 4
\fI_board\fP \fBBoard\fP to be copied
.RE
.PP
\fBReturns:\fP
.RS 4
A board instance 
.RE
.PP

.PP
Definition at line 40 of file board\&.cpp\&.
.SS "const int * Board::operator[] (int n) const"

.PP
Access operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP : Square's index
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer on the square 
.RE
.PP

.PP
Definition at line 155 of file board\&.cpp\&.
.SS "void Board::read (const std::string & str)"

.PP
Read a configuration form a string\&. Check validity of the string passed and modify the configuration\&. 
.PP
Definition at line 182 of file board\&.cpp\&.
.SS "void Board::setSquare (int x, int y, int color)"

.PP
Change a square's color\&. Changes the colors of a square whose coordinates are passed as parameters\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP : Square's abscissia 
.br
\fIy\fP : Squarer's ordinate 
.br
\fIcolor\fP : New color 
.RE
.PP

.PP
Definition at line 64 of file board\&.cpp\&.
.SS "std::string Board::write () const"

.PP
Write board\&. 
.PP
\fBReturns:\fP
.RS 4
A string witch represente the board 
.RE
.PP

.PP
Definition at line 169 of file board\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for TenTen from the source code\&.
